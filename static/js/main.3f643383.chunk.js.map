{"version":3,"sources":["Header.js","GenerateFavouriteStoreContent.js","FavouriteStores.js","SubTitle.js","Path.js","Pie.js","SpentChart.js","ChartLegend.js","GenerateSpentContent.js","SpentContents.js","helper.js","Spent.js","GenerateSpendCategories.js","SpendCategory.js","App.js","index.js"],"names":["Header","className","GenerateFavouriteStoreContent","storeName","currency","amount","imgSrc","Card","Content","Image","floated","size","src","Description","style","paddingTop","FavouriteStores","favStores","Fragment","Group","itemsPerRow","map","store","i","storeImage","key","SubTitle","radius","textAnchor","fill","subTitle1","subTitle2","subTitleColor","x","y","fontSize","getAnglePoint","startAngle","endAngle","x1","Math","cos","PI","y1","sin","x2","y2","Path","state","path","isMounted","animate","draw","s","a","b","c","step","p","props","self","angle","hole","push","setState","join","setTimeout","showLabel","trueHole","this","prevProps","_prevState","value","percent","percentValue","overflow","d","stroke","strokeWidth","nextProps","prevState","React","Component","Pie","sum","data","colors","colorsLength","length","diameter","reduce","carry","current","width","height","viewBox","xmlns","version","item","itemIndex","nextAngle","toFixed","Width","SpentChart","ChartLegend","textContents","content","color","department","spent","GenerateSpentContent","additionalContentStyle","listColors","Item","SpentContents","monthlySplitUp","monthlyData","spentSplit","totalSpent","areasOfExpenditure","Divider","earningSplit","totalReceived","areasOfEarning","getAreasOfExpenditure","splitArray","expenditureDepartments","n","toPrecision","getAreasOfReceiving","received","receivedDepartments","areasReceived","simulateSplit","num","departments","cnt","floor","random","getMonthName","currMonthNum","getRandomStore","faker","company","companyName","image","nightlife","finance","Spent","initialMonth","Date","getMonth","intialSplitArr","intialMonthlySplit","intialFavStores","useState","monthlySplit","updateMonthlySplit","favouriteStores","updatefavouriteStores","month","updateMonth","handleClick","monthId","number","splitS","splitR","newMonthlySplit","newFavStores","Message","icon","Icon","name","onClick","textAlign","GenerateSpendCategories","iconName","categoryName","totalPayments","totalAmount","Feed","Event","Label","circular","marginTop","Summary","borderRadius","background","paddingLeft","cursor","alert","SpendCategory","App","Segment","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3f643383.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n    return (\n        <section>\n            <div className=\"ui header\">Spend Analytics</div>\n            <p> Paytm Wallet, other wallets and Paytm Gift Voucher transactions</p>\n        </section>\n    );\n}\n\nexport default Header;","import React from 'react';\nimport {Card, Image} from 'semantic-ui-react';\n\nconst GenerateFavouriteStoreContent = ({storeName, currency, amount, imgSrc}) => {\n    return (\n        <Card>\n            <Card.Content>\n                <Image floated=\"left\" size=\"mini\" src={imgSrc} />\n                <Card.Description>\n                    {storeName}\n                    <div style={{ paddingTop: 10 }}>\n                        {currency} {amount}\n                    </div>\n                </Card.Description>\n            </Card.Content>\n        </Card>\n    );\n}\n\nexport default GenerateFavouriteStoreContent;","import React from 'react';\nimport {Card, Header} from 'semantic-ui-react';\nimport GenerateFavouriteStoreContent from './GenerateFavouriteStoreContent';\n\nconst FavouriteStores = ({favStores}) => {\n    return (\n        <React.Fragment>\n            <Header size='medium'>Favourite Stores</Header>\n            <Card.Group itemsPerRow={3}>\n                { favStores.map((store, i) => {\n                    return (\n                        <GenerateFavouriteStoreContent \n                            imgSrc={store.storeImage}\n                            storeName={store.storeName}\n                            currency={store.currency}\n                            amount={store.amount} \n                            key={i}/>\n                    );\n                  })\n                }\n            </Card.Group>\n        </React.Fragment>\n    );\n}\nexport default FavouriteStores;","import React from \"react\";\n\nconst SubTitle = ({\n  radius,\n  fill,\n  textAnchor,\n  subTitle1,\n  subTitle2,\n  subTitleColor,\n  currency\n}) => {\n  return (\n    <text x={radius} y={radius} fill={subTitleColor} textAnchor={textAnchor}>\n      <tspan style={{fontSize: 10}}>{subTitle1}</tspan>\n      <tspan x={radius} y={radius + 20}>\n        {currency}\n        {subTitle2}\n      </tspan>\n    </text>\n  );\n};\n\nexport default SubTitle;\n","import React from \"react\";\nimport SubTitle from \"./SubTitle\";\n\nfunction getAnglePoint(startAngle, endAngle, radius, x, y) {\n  var x1, y1, x2, y2;\n\n  x1 = x + radius * Math.cos((Math.PI * startAngle) / 180);\n  y1 = y + radius * Math.sin((Math.PI * startAngle) / 180);\n  x2 = x + radius * Math.cos((Math.PI * endAngle) / 180);\n  y2 = y + radius * Math.sin((Math.PI * endAngle) / 180);\n\n  return { x1, y1, x2, y2 };\n}\n\nclass Path extends React.Component {\n  state = {\n    path: \"\",\n    x: 0,\n    y: 0,\n    isMounted: true\n  };\n\n  componentDidMount() {\n    this.setState({\n      isMounted: true\n    });\n    this.animate();\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.radius !== prevState.radius) {\n      return { radius: nextProps.radius };\n    } else if (nextProps.hole !== prevState.hole) {\n      return { hole: nextProps.hole, trueHole: nextProps.hole };\n    } else if (nextProps.value !== prevState.value) {\n      return { value: nextProps.value };\n    } else if (nextProps.percent !== prevState.percent) {\n      return { percent: nextProps.percent };\n    } else if (nextProps.percentValue !== prevState.percentValue) {\n      return { percentValue: nextProps.percentValue };\n    } else if (nextProps.startAngle !== prevState.startAngle) {\n      return { startAngle: nextProps.startAngle };\n    } else if (nextProps.angle !== prevState.angle) {\n      return { angle: nextProps.angle };\n    } else if (nextProps.fill !== prevState.fill) {\n      return { fill: nextProps.fill };\n    } else return null;\n  }\n\n  componentDidUpdate(prevProps, _prevState) {\n    if (\n      prevProps.radius !== this.props.radius ||\n      prevProps.hole !== this.props.hole ||\n      prevProps.value !== this.props.value ||\n      prevProps.percent !== this.props.percent ||\n      prevProps.percentValue !== this.props.percentValue ||\n      prevProps.startAngle !== this.props.startAngle ||\n      prevProps.angle !== this.props.angle ||\n      prevProps.fill !== this.props.fill\n    ) {\n      this.setState({ path: \"\" });\n      this.animate();\n    }\n  }\n\n  componentWillUnmount() {\n    this.setState({\n      isMounted: false\n    });\n  }\n\n  animate = () => {\n    this.draw(0);\n  };\n\n  draw = (s) => {\n    if (!this.state.isMounted) {\n      return;\n    }\n\n    \n    let p = this.props,\n      path = [],\n      a,\n      b,\n      c,\n      self = this,\n      step;\n\n    step = p.angle / (37.5 / 2);\n\n    if (s + step > p.angle) {\n      s = p.angle;\n    }\n\n    // Get angle points\n    a = getAnglePoint(\n      p.startAngle,\n      p.startAngle + s,\n      p.radius,\n      p.radius,\n      p.radius\n    );\n    b = getAnglePoint(\n      p.startAngle,\n      p.startAngle + s,\n      p.radius - p.hole,\n      p.radius,\n      p.radius\n    );\n\n    path.push(\"M\" + a.x1 + \",\" + a.y1);\n    path.push(\n      \"A\" +\n        p.radius +\n        \",\" +\n        p.radius +\n        \" 0 \" +\n        (s > 180 ? 1 : 0) +\n        \",1 \" +\n        a.x2 +\n        \",\" +\n        a.y2\n    );\n    path.push(\"L\" + b.x2 + \",\" + b.y2);\n    path.push(\n      \"A\" +\n        (p.radius - p.hole) +\n        \",\" +\n        (p.radius - p.hole) +\n        \" 0 \" +\n        (s > 180 ? 1 : 0) +\n        \",0 \" +\n        b.x1 +\n        \",\" +\n        b.y1\n    );\n\n    // Close\n    path.push(\"Z\");\n\n    this.setState({ path: path.join(\" \") });\n\n    if (s < p.angle) {\n      setTimeout(function () {\n        self.draw(s + step);\n      }, 16);\n    } else if (p.showLabel) {\n      c = getAnglePoint(\n        p.startAngle,\n        p.startAngle + p.angle / 2,\n        p.radius / 2 + p.trueHole / 2,\n        p.radius,\n        p.radius\n      );\n\n      this.setState({\n        x: c.x2,\n        y: c.y2\n      });\n    }\n  };\n\n  render() {\n    return (\n      <g overflow=\"hidden\">\n        <path\n          d={this.state.path}\n          fill={this.props.fill}\n          stroke={this.props.stroke}\n          strokeWidth={this.props.strokeWidth ? this.props.strokeWidth : 1}\n        />\n        {this.props.showLabel && this.props.percentValue > 5 ? (\n          <text\n            x={this.state.x}\n            y={this.state.y}\n            fill=\"#fff\"\n            textAnchor=\"middle\"\n          >\n            {this.props.percent\n              ? this.props.percentValue + \"%\"\n              : this.props.value}\n          </text>\n        ) : null}\n        {this.props.subTitle1 ? (\n          <SubTitle {...this.props} textAnchor=\"middle\"/>\n        ) : null}\n      </g>\n    );\n  }\n}\n\nexport default Path;\n","import React from \"react\";\nimport Path from \"./Path\";\n\nconst Pie = ({ radius, data, colors, hole, strokeWidth, ...props }) => {\n  let colorsLength = colors.length,\n    diameter = radius * 2,\n    sum,\n    startAngle;\n\n  sum = data.reduce(function (carry, current) {\n    return carry + current;\n  }, 0);\n\n  startAngle = 0;\n\n  if (sum === 0) {\n    data = [1,1];\n    colors = [\"#eee\", \"#eee\"];\n    sum = 2;\n  }\n\n  if (data.length === 1) {\n    data.push(1);\n    sum += 1;\n  }\n\n  return (\n    <svg\n      width={diameter}\n      height={diameter}\n      viewBox={\"0 0 \" + diameter + \" \" + diameter}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      version=\"1.1\"\n    >\n      {\n        data.map((item, itemIndex) => {\n        let angle, nextAngle, percent;\n\n        nextAngle = startAngle;\n        angle = (item / sum) * 360;\n        percent = (item / sum) * 100;\n        startAngle += angle;\n\n        return (\n          <Path\n            key={itemIndex}\n            value={item}\n            percent={percent}\n            percentValue={percent.toFixed(1)}\n            startAngle={nextAngle}\n            angle={angle}\n            radius={radius}\n            hole={radius - hole}\n            trueHole={hole}\n            fill={colors[itemIndex % colorsLength]}\n            Width={strokeWidth}\n            {...props}\n          />\n        );\n      })}\n    </svg>\n  );\n};\n\nexport default Pie;\n","import React from \"react\";\nimport Pie from \"./Pie\";\n\nconst SpentChart = ({\n  data,\n  subTitle1,\n  subTitle2,\n  subTitleColor,\n  radius,\n  hole,\n  colors,\n  stroke,\n  strokeWidth,\n  showLabel,\n  currency\n}) => {\n  return (\n    <Pie\n      data={data}\n      subTitle1={subTitle1}\n      subTitle2={subTitle2}\n      subTitleColor={subTitleColor}\n      radius={radius}\n      hole={hole}\n      colors={colors}\n      stroke={stroke}\n      strokeWidth={strokeWidth}\n      showLabel={showLabel}\n      currency={currency}\n    />\n  );\n};\n\nexport default SpentChart;\n","import React from \"react\";\n\nconst ChartLegend = ({ textContents, colors }) => {\n  return textContents.map((content, i) => {\n    return (\n      <li key={i} style={{ color: colors[i] }}>\n        <span className=\"list-text\">\n          {content.department + \" \" + content.spent + \"%\"}\n        </span>\n      </li>\n    );\n  });\n};\n\nexport default ChartLegend;\n","import React from \"react\";\nimport { Item } from \"semantic-ui-react\";\n\nimport SpentChart from \"./SpentChart\";\nimport ChartLegend from \"./ChartLegend\";\n\nconst GenerateSpentContent = ({\n  additionalContentStyle,\n  data,\n  subTitle1,\n  subTitle2,\n  colors,\n  radius,\n  hole,\n  stroke,\n  strokeWidth,\n  showLabel,\n  currency,\n  textContents,\n  listColors\n}) => {\n  return (\n    <Item>\n      <Item.Image className=\"spent-content\">\n        <SpentChart\n          data={data}\n          subTitle1={subTitle1}\n          subTitle2={subTitle2}\n          colors={colors}\n          radius={radius}\n          hole={hole}\n          stroke={stroke}\n          strokeWidth={strokeWidth}\n          showLabel={showLabel}\n          currency={currency}\n        />\n      </Item.Image>\n      <Item.Content style={additionalContentStyle ? additionalContentStyle : {}}>\n        <ChartLegend textContents={textContents} colors={listColors} />\n      </Item.Content>\n    </Item>\n  );\n};\n\nexport default GenerateSpentContent;\n","import React from 'react';\nimport {Item, Divider} from 'semantic-ui-react';\n\nimport GenerateSpentContent from './GenerateSpentContent';\n\nconst SpentContents = ({monthlySplitUp}) => {\n\n    const subTitle1 = \"Money Spent\",\n        subTitle3 = \"Money Received\",\n        currency = \"\\u20B9\",\n        showLabel = false,\n        colors = [\"#43A19E\", \"#7B43A1\", \"#F2317A\", \"#ff8c00\", \"#58CF6C\", \"#ffc40c\", \"#1e90ff\"],\n        radius = 60,\n        hole = 50,\n        stroke = 1,\n        strokeWidth = 1;\n\n    return (\n        <Item.Group>\n            {\n                monthlySplitUp.map( (monthlyData, i) => {\n                    return (\n                        <React.Fragment key={i}>\n                            <GenerateSpentContent\n                                data={monthlyData.spentSplit}\n                                subTitle1={subTitle1}\n                                subTitle2={monthlyData.totalSpent}\n                                colors={colors}\n                                radius={radius}\n                                hole={hole}\n                                stroke={stroke}\n                                strokeWidth={strokeWidth}\n                                showLabel={showLabel}\n                                currency={currency}\n                                textContents={monthlyData.areasOfExpenditure} \n                                listColors={colors} />\n                            <Divider />\n                            <GenerateSpentContent\n                                data={monthlyData.earningSplit}\n                                subTitle1={subTitle3}\n                                subTitle2={monthlyData.totalReceived}\n                                subTitleColor={\"\"}\n                                colors={colors}\n                                radius={radius}\n                                hole={hole}\n                                stroke={stroke}\n                                strokeWidth={strokeWidth}\n                                showLabel={showLabel}\n                                currency={currency}\n                                textContents={monthlyData.areasOfEarning} \n                                listColors={colors} \n                                additionalContentStyle = {{paddingTop: 15}} />\n                        </React.Fragment>\n                    )\n                })\n            }\n      </Item.Group>\n    );\n}\n\nexport default SpentContents;","import faker from  'faker';\nexport const currency = \"\\u20B9\";\n\nexport const getAreasOfExpenditure = (splitArray, spent) => {\n    const expenditureDepartments = [\"Travel\", \"Food & Beverages\", \"Shopping\", \"Entertainment\", \"Recharge & Bill Payment\", \"Others\"];\n    let n = splitArray.length;\n    let areasOfExpenditure = [];\n    for( let i = 0; i < n; i++) {\n        areasOfExpenditure.push({\"department\": expenditureDepartments[i], \"spent\": (splitArray[i] / spent).toPrecision(2)  * 100})\n    }\n\n    if (n < expenditureDepartments.length) {\n        for( let i = n; i < expenditureDepartments.length; i++) {\n            areasOfExpenditure.push({\"department\": expenditureDepartments[i], \"spent\": 0})\n        }\n    }\n    return areasOfExpenditure;\n}\n\nexport const getAreasOfReceiving = (splitArray, received) => {\n    const receivedDepartments = [\"Cashback\", \"Friends & Family\", \"Refunds\", \"Food Wallet\"];\n    let n = splitArray.length;\n    let areasReceived = [];\n    for( let i = 0; i < n; i++) {\n        areasReceived.push({\"department\": receivedDepartments[i], \"spent\": (splitArray[i] / received).toPrecision(2)  * 100})\n    }\n\n    if (n < receivedDepartments.length) {\n        for( let i = n; i < receivedDepartments.length; i++) {\n            areasReceived.push({\"department\": receivedDepartments[i], \"spent\": 0})\n        }\n    }\n    return areasReceived;\n}\n\nexport const simulateSplit = (num, departments) => {\n    let a = [], cnt = Math.floor((Math.random() * departments) + 1);\n    for (let i=0; i<cnt; i++) {\n        a.push(num /cnt );\n    }\n    return a;\n}\n\nexport const getMonthName = (currMonthNum) => {\n    const allMonths = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    return allMonths[currMonthNum];\n}\n\nexport const getRandomStore = () => {\n   const currency = \"\\u20B9\";\n   return {\n        \"storeName\": faker.company.companyName(),\n        \"storeImage\": faker.image.nightlife(150, 150),\n        \"currency\": currency,\n        \"amount\": faker.finance.amount()\n        }\n}","import React, {useState} from 'react';\nimport { Icon, Message } from \"semantic-ui-react\";\nimport faker from 'faker';\n\nimport FavouriteStores from './FavouriteStores';\nimport SpentContents from './SpentContents';\nimport {getAreasOfExpenditure, getAreasOfReceiving, simulateSplit, getRandomStore, getMonthName} from './helper';\n \nconst Spent = () => {\n    const initialMonth = new Date().getMonth(),\n        intialSplitArr = [5, 12, 8, 3],\n        intialMonthlySplit = [\n            {\n            \"month\": getMonthName(initialMonth),\n            \"totalSpent\": 100,\n            \"totalReceived\": 100,\n            \"spentSplit\": intialSplitArr,\n            \"earningSplit\": intialSplitArr,\n            \"areasOfExpenditure\": getAreasOfExpenditure(intialSplitArr, 100),\n            \"areasOfEarning\": getAreasOfReceiving(intialSplitArr, 100)\n            }\n        ],\n        intialFavStores = [getRandomStore(), getRandomStore(), getRandomStore()];\n\n    const [monthlySplit, updateMonthlySplit] = useState(intialMonthlySplit);\n    const [favouriteStores, updatefavouriteStores] = useState(intialFavStores);\n    const [month, updateMonth] = useState(initialMonth);\n\n      const handleClick = (monthId) => {\n          let spent = faker.random.number(1000),\n                received = faker.random.number(1000),\n                splitS = simulateSplit(spent, 6),\n                splitR = simulateSplit(received, 4);\n\n         const newMonthlySplit = [\n            {\n            \"month\": getMonthName(monthId),\n            \"totalSpent\": faker.random.number(1000),\n            \"totalReceived\": faker.random.number(1000),\n            \"spentSplit\": splitS,\n            \"earningSplit\": splitR,\n            \"areasOfExpenditure\": getAreasOfExpenditure(splitS, spent),\n            \"areasOfEarning\": getAreasOfReceiving(splitR, received),\n            }\n        ],\n        newFavStores = [getRandomStore(), getRandomStore(), getRandomStore()];\n        updateMonthlySplit(newMonthlySplit);\n        updateMonth(monthId);\n        updatefavouriteStores(newFavStores);\n      }\n\n\n    return (\n        <section>\n            <Message icon>\n            {month === 0 ? \"\" : <Icon name=\"left chevron\" style={{ fontSize: \"14px\" }} onClick={() => handleClick(month - 1)}/>}\n            <Message.Content>\n                <Message.Header style={{ textAlign: \"center\" }}>\n                {getMonthName(month)}\n                </Message.Header>\n            </Message.Content>\n            {month === 11 ? \"\" : <Icon name=\"right chevron\" style={{ fontSize: \"14px\" }} onClick={() => handleClick(month + 1)} />}\n            </Message>\n            <SpentContents monthlySplitUp={monthlySplit} />\n            <FavouriteStores favStores={favouriteStores} />\n        </section>\n    );\n}\nexport default Spent;","import React from 'react';\nimport {Feed, Icon, Label} from 'semantic-ui-react';\n\nconst GenerateSpendCategories = ({iconName, categoryName, totalPayments, currency, totalAmount, className}) => {\n    return (\n        <Feed.Event>\n            <Feed.Label  >\n                <Icon  name={iconName} circular className={className}/>\n            </Feed.Label>\n            <Feed.Content style={{marginTop:0}}>\n                <Feed.Summary>\n                    {categoryName}\n                </Feed.Summary>\n                <Feed.Date content={totalPayments === 1 ? `${totalPayments} Payment` : `${totalPayments} Payments`} style={{paddingTop:5, fontSize:10}} />\n            </Feed.Content>\n            <Label style={{height:25, width: 85, borderRadius:15, textAlign:\"right\", background: \"#EBF5FB\"}}>\n                    {`${currency} ${totalAmount}`} <span style={{paddingLeft: 5, fontSize: 13, cursor: \"pointer\" }} onClick={()=> alert(\"yet to implement\")}> &gt;</span> \n            </Label>\n        </Feed.Event>\n    );\n}\n\nexport default GenerateSpendCategories;","import React from \"react\";\nimport {Card, Feed, Divider, Header} from 'semantic-ui-react';\nimport faker from 'faker';\nimport GenerateSpendCategories from \"./GenerateSpendCategories\";\n\nimport {currency} from './helper';\n\nconst SpendCategory = () => {\nreturn (\n<section>\n    <Header size='medium'>Spends by Category</Header>\n    <Card className=\"category-card\">\n        <Card.Content>\n            <Feed>\n                <GenerateSpendCategories \n                    iconName=\"car\" \n                    categoryName=\"Fuel & Automobiles\"\n                    totalPayments={faker.random.number(10)}\n                    totalAmount={faker.finance.amount(100, 1000)}\n                    currency={currency}\n                    className=\"fuel-transport-icon\"\n                    />\n                <Divider />\n                <GenerateSpendCategories \n                    iconName=\"user\" \n                    categoryName=\"Services\"\n                    totalPayments={faker.random.number(10)}\n                    totalAmount={faker.finance.amount(100, 1000)}\n                    currency={currency}\n                    className=\"user-services-icon\"\n                    />\n                <Divider />\n                <GenerateSpendCategories \n                    iconName=\"medkit\" \n                    categoryName=\"Personal & Health Care\"\n                    totalPayments={faker.random.number(10)}\n                    totalAmount={faker.finance.amount(100, 1000)}\n                    currency={currency}\n                    className=\"health-care-icon\"\n                    />\n            </Feed>\n        </Card.Content>\n\n    </Card>\n</section>\n)\n}\n\n\nexport default SpendCategory;","import React from \"react\";\n\nimport { Segment } from \"semantic-ui-react\";\nimport \"./styles.css\";\n\nimport Header from './Header';\nimport Spent from './Spent';\nimport SpendCategory from './SpendCategory';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Segment >\n        <Header />\n        <Spent />\n        <SpendCategory />\n      </Segment>\n    </div>\n    \n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}